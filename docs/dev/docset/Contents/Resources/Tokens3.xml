<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/ECClient.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/ECClient</TokenIdentifier>
			<Abstract type="html">Array of SDP replacements.</Abstract>
			<DeclaredIn>ECClient.h</DeclaredIn>
            
			
			<NodeRef refid="3"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/setDelegate:</TokenIdentifier>
			<Abstract type="html">ECClientDelegate instance.</Abstract>
			<DeclaredIn>ECClient.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) id&lt;ECClientDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/delegate</TokenIdentifier>
			<Abstract type="html">ECClientDelegate instance.</Abstract>
			<DeclaredIn>ECClient.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) id&lt;ECClientDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ECClient/delegate</TokenIdentifier>
			<Abstract type="html">ECClientDelegate instance.</Abstract>
			<DeclaredIn>ECClient.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) id&lt;ECClientDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/setServerConfiguration:</TokenIdentifier>
			<Abstract type="html">Server configuration for this client.</Abstract>
			<DeclaredIn>ECClient.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSDictionary *serverConfiguration</Declaration>
			
			
			<Anchor>//api/name/serverConfiguration</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/serverConfiguration</TokenIdentifier>
			<Abstract type="html">Server configuration for this client.</Abstract>
			<DeclaredIn>ECClient.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSDictionary *serverConfiguration</Declaration>
			
			
			<Anchor>//api/name/serverConfiguration</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ECClient/serverConfiguration</TokenIdentifier>
			<Abstract type="html">Server configuration for this client.</Abstract>
			<DeclaredIn>ECClient.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSDictionary *serverConfiguration</Declaration>
			
			
			<Anchor>//api/name/serverConfiguration</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/setLocalStream:</TokenIdentifier>
			<Abstract type="html">Local Stream assigned to this client.</Abstract>
			<DeclaredIn>ECClient.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) RTCMediaStream *localStream</Declaration>
			
			
			<Anchor>//api/name/localStream</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/localStream</TokenIdentifier>
			<Abstract type="html">Local Stream assigned to this client.</Abstract>
			<DeclaredIn>ECClient.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) RTCMediaStream *localStream</Declaration>
			
			
			<Anchor>//api/name/localStream</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ECClient/localStream</TokenIdentifier>
			<Abstract type="html">Local Stream assigned to this client.</Abstract>
			<DeclaredIn>ECClient.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) RTCMediaStream *localStream</Declaration>
			
			
			<Anchor>//api/name/localStream</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/setMaxBitrate:</TokenIdentifier>
			<Abstract type="html">Max bitrate allowed for this client to use.</Abstract>
			<DeclaredIn>ECClient.h</DeclaredIn>
			
			<Declaration>@property NSNumber *maxBitrate</Declaration>
			
			
			<Anchor>//api/name/maxBitrate</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/maxBitrate</TokenIdentifier>
			<Abstract type="html">Max bitrate allowed for this client to use.</Abstract>
			<DeclaredIn>ECClient.h</DeclaredIn>
			
			<Declaration>@property NSNumber *maxBitrate</Declaration>
			
			
			<Anchor>//api/name/maxBitrate</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ECClient/maxBitrate</TokenIdentifier>
			<Abstract type="html">Max bitrate allowed for this client to use.</Abstract>
			<DeclaredIn>ECClient.h</DeclaredIn>
			
			<Declaration>@property NSNumber *maxBitrate</Declaration>
			
			
			<Anchor>//api/name/maxBitrate</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/setLimitBitrate:</TokenIdentifier>
			<Abstract type="html">Should bitrate be limited to maxBitrate value?</Abstract>
			<DeclaredIn>ECClient.h</DeclaredIn>
			
			<Declaration>@property BOOL limitBitrate</Declaration>
			
			
			<Anchor>//api/name/limitBitrate</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/limitBitrate</TokenIdentifier>
			<Abstract type="html">Should bitrate be limited to maxBitrate value?</Abstract>
			<DeclaredIn>ECClient.h</DeclaredIn>
			
			<Declaration>@property BOOL limitBitrate</Declaration>
			
			
			<Anchor>//api/name/limitBitrate</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ECClient/limitBitrate</TokenIdentifier>
			<Abstract type="html">Should bitrate be limited to maxBitrate value?</Abstract>
			<DeclaredIn>ECClient.h</DeclaredIn>
			
			<Declaration>@property BOOL limitBitrate</Declaration>
			
			
			<Anchor>//api/name/limitBitrate</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/setPeerSocketId:</TokenIdentifier>
			<Abstract type="html">Peer socket id assigned by Licode for signaling P2P connections.</Abstract>
			<DeclaredIn>ECClient.h</DeclaredIn>
			
			<Declaration>@property NSString *peerSocketId</Declaration>
			
			
			<Anchor>//api/name/peerSocketId</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/peerSocketId</TokenIdentifier>
			<Abstract type="html">Peer socket id assigned by Licode for signaling P2P connections.</Abstract>
			<DeclaredIn>ECClient.h</DeclaredIn>
			
			<Declaration>@property NSString *peerSocketId</Declaration>
			
			
			<Anchor>//api/name/peerSocketId</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ECClient/peerSocketId</TokenIdentifier>
			<Abstract type="html">Peer socket id assigned by Licode for signaling P2P connections.</Abstract>
			<DeclaredIn>ECClient.h</DeclaredIn>
			
			<Declaration>@property NSString *peerSocketId</Declaration>
			
			
			<Anchor>//api/name/peerSocketId</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/setStreamId:</TokenIdentifier>
			<Abstract type="html">The streamId</Abstract>
			<DeclaredIn>ECClient.h</DeclaredIn>
			
			<Declaration>@property NSString *streamId</Declaration>
			
			
			<Anchor>//api/name/streamId</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/streamId</TokenIdentifier>
			<Abstract type="html">The streamId</Abstract>
			<DeclaredIn>ECClient.h</DeclaredIn>
			
			<Declaration>@property NSString *streamId</Declaration>
			
			
			<Anchor>//api/name/streamId</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ECClient/streamId</TokenIdentifier>
			<Abstract type="html">The streamId</Abstract>
			<DeclaredIn>ECClient.h</DeclaredIn>
			
			<Declaration>@property NSString *streamId</Declaration>
			
			
			<Anchor>//api/name/streamId</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/initWithDelegate:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithDelegate:(id&lt;ECClientDelegate&gt;)delegate</Declaration>
			
			
			<Anchor>//api/name/initWithDelegate:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/initWithDelegate:andPeerFactory:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithDelegate:(id&lt;ECClientDelegate&gt;)delegate andPeerFactory:(RTCPeerConnectionFactory *)peerFactory</Declaration>
			
			
			<Anchor>//api/name/initWithDelegate:andPeerFactory:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/initWithDelegate:peerFactory:peerSocketId:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithDelegate:(id&lt;ECClientDelegate&gt;)delegate peerFactory:(RTCPeerConnectionFactory *)peerFactory peerSocketId:(NSString *)peerSocketId</Declaration>
			
			
			<Anchor>//api/name/initWithDelegate:peerFactory:peerSocketId:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/initWithDelegate:peerFactory:streamId:peerSocketId:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithDelegate:(id&lt;ECClientDelegate&gt;)delegate peerFactory:(RTCPeerConnectionFactory *)peerFactory streamId:(NSString *)streamId peerSocketId:(NSString *)peerSocketId</Declaration>
			
			
			<Anchor>//api/name/initWithDelegate:peerFactory:streamId:peerSocketId:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/disconnect</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient.h</DeclaredIn>
			
			<Declaration>- (void)disconnect</Declaration>
			
			
			<Anchor>//api/name/disconnect</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ECClient/replaceSDPLine:withNewLine:</TokenIdentifier>
			<Abstract type="html">@deprecated</Abstract>
			<DeclaredIn>ECClient.h</DeclaredIn>
			
			<Declaration>+ (void)replaceSDPLine:(NSString *)line withNewLine:(NSString *)newLine</Declaration>
			
			
			<Anchor>//api/name/replaceSDPLine:withNewLine:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ECClient/setPreferredVideoCodec:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient.h</DeclaredIn>
			
			<Declaration>+ (void)setPreferredVideoCodec:(NSString *)codec</Declaration>
			
			
			<Anchor>//api/name/setPreferredVideoCodec:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ECClient/getPreferredVideoCodec</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient.h</DeclaredIn>
			
			<Declaration>+ (NSString *)getPreferredVideoCodec</Declaration>
			
			
			<Anchor>//api/name/getPreferredVideoCodec</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ECClient/hackSDPWithBlock:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient.h</DeclaredIn>
			
			<Declaration>+ (void)hackSDPWithBlock:(SDPHackCallback)callback</Declaration>
			
			
			<Anchor>//api/name/hackSDPWithBlock:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/init</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient.m</DeclaredIn>
			
			<Declaration>- (instancetype)init</Declaration>
			
			
			<Anchor>//api/name/init</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/setState:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient.m</DeclaredIn>
			
			<Declaration>- (void)setState:(ECClientState)newState</Declaration>
			
			
			<Anchor>//api/name/setState:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/defaultPeerConnectionConstraints</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient.m</DeclaredIn>
			
			<Declaration>- (RTCMediaConstraints *)defaultPeerConnectionConstraints</Declaration>
			
			
			<Anchor>//api/name/defaultPeerConnectionConstraints</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/defaultAnswerConstraints</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient.m</DeclaredIn>
			
			<Declaration>- (RTCMediaConstraints *)defaultAnswerConstraints</Declaration>
			
			
			<Anchor>//api/name/defaultAnswerConstraints</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/defaultOfferConstraints</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient.m</DeclaredIn>
			
			<Declaration>- (RTCMediaConstraints *)defaultOfferConstraints</Declaration>
			
			
			<Anchor>//api/name/defaultOfferConstraints</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/signalingChannelDidOpenChannel:</TokenIdentifier>
			<Abstract type="html">Event fired when Erizo server has validated our token.</Abstract>
			<DeclaredIn>ECClient.m</DeclaredIn>
			
			<Declaration>- (void)signalingChannelDidOpenChannel:(ECSignalingChannel *)signalingChannel</Declaration>
			<Parameters>
				<Parameter>
					<Name>signalingChannel</Name>
					<Abstract type="html">ECSignalingChannel the channel that emit the message.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/signalingChannelDidOpenChannel:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/signalingChannel:readyToPublishStreamId:peerSocketId:</TokenIdentifier>
			<Abstract type="html">Event fired when Erizo is ready to receive a publishing stream.</Abstract>
			<DeclaredIn>ECClient.m</DeclaredIn>
			
			<Declaration>- (void)signalingChannel:(ECSignalingChannel *)signalingChannel readyToPublishStreamId:(NSString *)streamId peerSocketId:(NSString *)peerSocketId</Declaration>
			<Parameters>
				<Parameter>
					<Name>signalingChannel</Name>
					<Abstract type="html">ECSignalingChannel the channel that emit the message.</Abstract>
				</Parameter><Parameter>
					<Name>peerSocketId</Name>
					<Abstract type="html">Id of the socket in a p2p publishing without MCU. Pass nil if
        you are not setting a P2P room.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/signalingChannel:readyToPublishStreamId:peerSocketId:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/signalingChannelPublishFailed:</TokenIdentifier>
			<Abstract type="html">Event fired when Erizo failed to publishing stream.</Abstract>
			<DeclaredIn>ECClient.m</DeclaredIn>
			
			<Declaration>- (void)signalingChannelPublishFailed:(ECSignalingChannel *)signalingChannel</Declaration>
			<Parameters>
				<Parameter>
					<Name>signalingChannel</Name>
					<Abstract type="html">ECSignalingChannel the channel that emit the message.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/signalingChannelPublishFailed:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/signalingChannel:readyToSubscribeStreamId:peerSocketId:</TokenIdentifier>
			<Abstract type="html">Event fired each time ECSignalingChannel has received a confirmation from the server
to subscribe a stream.
This event is fired to let Client know that it can start signaling to subscribe the stream.</Abstract>
			<DeclaredIn>ECClient.m</DeclaredIn>
			
			<Declaration>- (void)signalingChannel:(ECSignalingChannel *)channel readyToSubscribeStreamId:(NSString *)streamId peerSocketId:(NSString *)peerSocketId</Declaration>
			<Parameters>
				<Parameter>
					<Name>channel</Name>
					<Abstract type="html">ECSignalingChannel the channel that emit the message.</Abstract>
				</Parameter><Parameter>
					<Name>streamId</Name>
					<Abstract type="html">Id of the stream that will be subscribed.</Abstract>
				</Parameter><Parameter>
					<Name>peerSocketId,</Name>
					<Abstract type="html">pass nil if is MCU being used.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/signalingChannel:readyToSubscribeStreamId:peerSocketId:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/signalingChannel:didReceiveMessage:</TokenIdentifier>
			<Abstract type="html">Event fired each time ECSignalingChannel has received a new ECSignalingMessage.</Abstract>
			<DeclaredIn>ECClient.m</DeclaredIn>
			
			<Declaration>- (void)signalingChannel:(ECSignalingChannel *)channel didReceiveMessage:(ECSignalingMessage *)message</Declaration>
			<Parameters>
				<Parameter>
					<Name>channel</Name>
					<Abstract type="html">ECSignalingChannel the channel that emit the message.</Abstract>
				</Parameter><Parameter>
					<Name>message</Name>
					<Abstract type="html">ECSignalingMessage received by channel.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/signalingChannel:didReceiveMessage:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/peerConnection:didAddStream:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient.m</DeclaredIn>
			
			<Declaration>- (void)peerConnection:(RTCPeerConnection *)peerConnection didAddStream:(nonnull RTCMediaStream *)stream</Declaration>
			
			
			<Anchor>//api/name/peerConnection:didAddStream:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/peerConnection:didRemoveStream:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient.m</DeclaredIn>
			
			<Declaration>- (void)peerConnection:(RTCPeerConnection *)peerConnection didRemoveStream:(RTCMediaStream *)stream</Declaration>
			
			
			<Anchor>//api/name/peerConnection:didRemoveStream:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/peerConnection:didChangeSignalingState:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient.m</DeclaredIn>
			
			<Declaration>- (void)peerConnection:(RTCPeerConnection *)peerConnection didChangeSignalingState:(RTCSignalingState)stateChanged</Declaration>
			
			
			<Anchor>//api/name/peerConnection:didChangeSignalingState:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/peerConnection:didChangeIceConnectionState:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient.m</DeclaredIn>
			
			<Declaration>- (void)peerConnection:(RTCPeerConnection *)peerConnection didChangeIceConnectionState:(RTCIceConnectionState)newState</Declaration>
			
			
			<Anchor>//api/name/peerConnection:didChangeIceConnectionState:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/peerConnection:didChangeIceGatheringState:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient.m</DeclaredIn>
			
			<Declaration>- (void)peerConnection:(RTCPeerConnection *)peerConnection didChangeIceGatheringState:(RTCIceGatheringState)newState</Declaration>
			
			
			<Anchor>//api/name/peerConnection:didChangeIceGatheringState:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/peerConnection:didRemoveIceCandidates:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient.m</DeclaredIn>
			
			<Declaration>- (void)peerConnection:(RTCPeerConnection *)peerConnection didRemoveIceCandidates:(NSArray&lt;RTCIceCandidate*&gt; *)candidates</Declaration>
			
			
			<Anchor>//api/name/peerConnection:didRemoveIceCandidates:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/peerConnection:didGenerateIceCandidate:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient.m</DeclaredIn>
			
			<Declaration>- (void)peerConnection:(RTCPeerConnection *)peerConnection didGenerateIceCandidate:(nonnull RTCIceCandidate *)candidate</Declaration>
			
			
			<Anchor>//api/name/peerConnection:didGenerateIceCandidate:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/peerConnection:didOpenDataChannel:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient.m</DeclaredIn>
			
			<Declaration>- (void)peerConnection:(RTCPeerConnection *)peerConnection didOpenDataChannel:(RTCDataChannel *)dataChannel</Declaration>
			
			
			<Anchor>//api/name/peerConnection:didOpenDataChannel:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/peerConnectionShouldNegotiate:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient.m</DeclaredIn>
			
			<Declaration>- (void)peerConnectionShouldNegotiate:(RTCPeerConnection *)peerConnection</Declaration>
			
			
			<Anchor>//api/name/peerConnectionShouldNegotiate:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/hackSDP:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient.m</DeclaredIn>
			
			<Declaration>- (NSString *)hackSDP:(NSString *)sdp</Declaration>
			
			
			<Anchor>//api/name/hackSDP:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/sdpReplace:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient.m</DeclaredIn>
			
			<Declaration>- (NSString *)sdpReplace:(NSString *)sdp</Declaration>
			
			
			<Anchor>//api/name/sdpReplace:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/setupICEServers:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient.m</DeclaredIn>
			
			<Declaration>- (void)setupICEServers:(NSDictionary *)ICEServersConfiguration</Declaration>
			
			
			<Anchor>//api/name/setupICEServers:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/startPublishSignaling</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient.m</DeclaredIn>
			
			<Declaration>- (void)startPublishSignaling</Declaration>
			
			
			<Anchor>//api/name/startPublishSignaling</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/startSubscribeSignaling</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient.m</DeclaredIn>
			
			<Declaration>- (void)startSubscribeSignaling</Declaration>
			
			
			<Anchor>//api/name/startSubscribeSignaling</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/drainMessageQueueIfReady</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient.m</DeclaredIn>
			
			<Declaration>- (void)drainMessageQueueIfReady</Declaration>
			
			
			<Anchor>//api/name/drainMessageQueueIfReady</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/processSignalingMessage:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient.m</DeclaredIn>
			
			<Declaration>- (void)processSignalingMessage:(ECSignalingMessage *)message</Declaration>
			
			
			<Anchor>//api/name/processSignalingMessage:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/peerConnection:didSetSessionDescriptionWithError:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient.m</DeclaredIn>
			
			<Declaration>- (void)peerConnection:(RTCPeerConnection *)peerConnection didSetSessionDescriptionWithError:(NSError *)error</Declaration>
			
			
			<Anchor>//api/name/peerConnection:didSetSessionDescriptionWithError:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/peerConnection:didCreateSessionDescription:error:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient.m</DeclaredIn>
			
			<Declaration>- (void)peerConnection:(RTCPeerConnection *)peerConnection didCreateSessionDescription:(RTCSessionDescription *)sdp error:(NSError *)error</Declaration>
			
			
			<Anchor>//api/name/peerConnection:didCreateSessionDescription:error:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/setMaxBitrateForPeerConnectionVideoSender</TokenIdentifier>
			<Abstract type="html">hackSDP: (&lt;b class=&quot;deprecated&quot;&gt;Deprecated:&lt;/b&gt;&lt;span class=&quot;deprecated&quot;&gt; hackSDP:&lt;/span&gt;)</Abstract>
			<DeclaredIn>ECClient.m</DeclaredIn>
			
			<Declaration>- (void)setMaxBitrateForPeerConnectionVideoSender</Declaration>
			
			
			<Anchor>//api/name/setMaxBitrateForPeerConnectionVideoSender</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/setMaxBitrate:forVideoSender:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient.m</DeclaredIn>
			
			<Declaration>- (void)setMaxBitrate:(NSNumber *)maxBitrate forVideoSender:(RTCRtpSender *)sender</Declaration>
			
			
			<Anchor>//api/name/setMaxBitrate:forVideoSender:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/setPeerConnection:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) RTCPeerConnection *peerConnection</Declaration>
			
			
			<Anchor>//api/name/peerConnection</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/peerConnection</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) RTCPeerConnection *peerConnection</Declaration>
			
			
			<Anchor>//api/name/peerConnection</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ECClient/peerConnection</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) RTCPeerConnection *peerConnection</Declaration>
			
			
			<Anchor>//api/name/peerConnection</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/setFactory:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) RTCPeerConnectionFactory *factory</Declaration>
			
			
			<Anchor>//api/name/factory</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/factory</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) RTCPeerConnectionFactory *factory</Declaration>
			
			
			<Anchor>//api/name/factory</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ECClient/factory</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) RTCPeerConnectionFactory *factory</Declaration>
			
			
			<Anchor>//api/name/factory</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/setMessageQueue:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSMutableArray *messageQueue</Declaration>
			
			
			<Anchor>//api/name/messageQueue</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/messageQueue</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSMutableArray *messageQueue</Declaration>
			
			
			<Anchor>//api/name/messageQueue</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ECClient/messageQueue</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSMutableArray *messageQueue</Declaration>
			
			
			<Anchor>//api/name/messageQueue</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/setHasReceivedSdp:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL hasReceivedSdp</Declaration>
			
			
			<Anchor>//api/name/hasReceivedSdp</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/hasReceivedSdp</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL hasReceivedSdp</Declaration>
			
			
			<Anchor>//api/name/hasReceivedSdp</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ECClient/hasReceivedSdp</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL hasReceivedSdp</Declaration>
			
			
			<Anchor>//api/name/hasReceivedSdp</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/setSignalingChannel:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) ECSignalingChannel *signalingChannel</Declaration>
			
			
			<Anchor>//api/name/signalingChannel</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/signalingChannel</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) ECSignalingChannel *signalingChannel</Declaration>
			
			
			<Anchor>//api/name/signalingChannel</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ECClient/signalingChannel</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) ECSignalingChannel *signalingChannel</Declaration>
			
			
			<Anchor>//api/name/signalingChannel</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/setIsInitiator:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL isInitiator</Declaration>
			
			
			<Anchor>//api/name/isInitiator</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/isInitiator</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL isInitiator</Declaration>
			
			
			<Anchor>//api/name/isInitiator</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ECClient/isInitiator</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL isInitiator</Declaration>
			
			
			<Anchor>//api/name/isInitiator</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/setIceServers:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSMutableArray *iceServers</Declaration>
			
			
			<Anchor>//api/name/iceServers</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/iceServers</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSMutableArray *iceServers</Declaration>
			
			
			<Anchor>//api/name/iceServers</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ECClient/iceServers</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSMutableArray *iceServers</Declaration>
			
			
			<Anchor>//api/name/iceServers</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/setDefaultPeerConnectionConstraints:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) RTCMediaConstraints *defaultPeerConnectionConstraints</Declaration>
			
			
			<Anchor>//api/name/defaultPeerConnectionConstraints</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECClient/defaultPeerConnectionConstraints</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) RTCMediaConstraints *defaultPeerConnectionConstraints</Declaration>
			
			
			<Anchor>//api/name/defaultPeerConnectionConstraints</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ECClient/defaultPeerConnectionConstraints</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECClient+Internal.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) RTCMediaConstraints *defaultPeerConnectionConstraints</Declaration>
			
			
			<Anchor>//api/name/defaultPeerConnectionConstraints</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
        
        
	</File>
</Tokens>