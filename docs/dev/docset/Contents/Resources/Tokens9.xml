<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/ECRoom.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/ECRoom</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
            
			
			<NodeRef refid="9"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/initWithEncodedToken:delegate:andPeerFactory:</TokenIdentifier>
			<Abstract type="html">Create a ECRoom instance with a given Licode token and ECRoomDelegate.</Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithEncodedToken:(NSString *)encodedToken delegate:(id&lt;ECRoomDelegate&gt;)delegate andPeerFactory:(RTCPeerConnectionFactory *)factory</Declaration>
			<Parameters>
				<Parameter>
					<Name>encodedToken</Name>
					<Abstract type="html">Base64 encoded string.</Abstract>
				</Parameter><Parameter>
					<Name>delegate</Name>
					<Abstract type="html">ECRoomDelegate instance for this room.</Abstract>
				</Parameter><Parameter>
					<Name>factory</Name>
					<Abstract type="html">RTCPeerConnectionFactory instance for this room.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">instancetype</Abstract></ReturnValue>
			<Anchor>//api/name/initWithEncodedToken:delegate:andPeerFactory:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/initWithDelegate:andPeerFactory:</TokenIdentifier>
			<Abstract type="html">Create an ECRoom with the given ECRoomDelegate.</Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/ECRoom/createSignalingChannelWithEncodedToken:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (instancetype)initWithDelegate:(id&lt;ECRoomDelegate&gt;)roomDelegate andPeerFactory:(RTCPeerConnectionFactory *)factory</Declaration>
			<Parameters>
				<Parameter>
					<Name>roomDelegate</Name>
					<Abstract type="html">ECRoomDelegate instance for this room.</Abstract>
				</Parameter><Parameter>
					<Name>factory</Name>
					<Abstract type="html">RTCPeerConnectionFactory instance for this room.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">instancetype</Abstract></ReturnValue>
			<Anchor>//api/name/initWithDelegate:andPeerFactory:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/setDelegate:</TokenIdentifier>
			<Abstract type="html">ECRoomDelegate were this room will invoke methods as events.</Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
			
			<Declaration>@property (weak, nonatomic, readonly) id&lt;ECRoomDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/delegate</TokenIdentifier>
			<Abstract type="html">ECRoomDelegate were this room will invoke methods as events.</Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
			
			<Declaration>@property (weak, nonatomic, readonly) id&lt;ECRoomDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ECRoom/delegate</TokenIdentifier>
			<Abstract type="html">ECRoomDelegate were this room will invoke methods as events.</Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
			
			<Declaration>@property (weak, nonatomic, readonly) id&lt;ECRoomDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/setStatsDelegate:</TokenIdentifier>
			<Abstract type="html">ECRoomStatsDelegate delegate to receive stats.
Notice that you should also set publishingStats to YES.</Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
			
			<Declaration>@property (weak, nonatomic) id&lt;ECRoomStatsDelegate&gt; statsDelegate</Declaration>
			
			
			<Anchor>//api/name/statsDelegate</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/statsDelegate</TokenIdentifier>
			<Abstract type="html">ECRoomStatsDelegate delegate to receive stats.
Notice that you should also set publishingStats to YES.</Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
			
			<Declaration>@property (weak, nonatomic) id&lt;ECRoomStatsDelegate&gt; statsDelegate</Declaration>
			
			
			<Anchor>//api/name/statsDelegate</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ECRoom/statsDelegate</TokenIdentifier>
			<Abstract type="html">ECRoomStatsDelegate delegate to receive stats.
Notice that you should also set publishingStats to YES.</Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
			
			<Declaration>@property (weak, nonatomic) id&lt;ECRoomStatsDelegate&gt; statsDelegate</Declaration>
			
			
			<Anchor>//api/name/statsDelegate</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/setStatus:</TokenIdentifier>
			<Abstract type="html">The status of this Room.</Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) ECRoomStatus status</Declaration>
			
			
			<Anchor>//api/name/status</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/status</TokenIdentifier>
			<Abstract type="html">The status of this Room.</Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) ECRoomStatus status</Declaration>
			
			
			<Anchor>//api/name/status</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ECRoom/status</TokenIdentifier>
			<Abstract type="html">The status of this Room.</Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) ECRoomStatus status</Declaration>
			
			
			<Anchor>//api/name/status</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/setRoomMetadata:</TokenIdentifier>
			<Abstract type="html">Contents full responde after signalling channel connect the server.</Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
			
			<Declaration>@property NSDictionary *roomMetadata</Declaration>
			
			
			<Anchor>//api/name/roomMetadata</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/roomMetadata</TokenIdentifier>
			<Abstract type="html">Contents full responde after signalling channel connect the server.</Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
			
			<Declaration>@property NSDictionary *roomMetadata</Declaration>
			
			
			<Anchor>//api/name/roomMetadata</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ECRoom/roomMetadata</TokenIdentifier>
			<Abstract type="html">Contents full responde after signalling channel connect the server.</Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
			
			<Declaration>@property NSDictionary *roomMetadata</Declaration>
			
			
			<Anchor>//api/name/roomMetadata</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/setRoomId:</TokenIdentifier>
			<Abstract type="html">The Erizo room id for this room instance.</Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
			
			<Declaration>@property NSString *roomId</Declaration>
			
			
			<Anchor>//api/name/roomId</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/roomId</TokenIdentifier>
			<Abstract type="html">The Erizo room id for this room instance.</Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
			
			<Declaration>@property NSString *roomId</Declaration>
			
			
			<Anchor>//api/name/roomId</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ECRoom/roomId</TokenIdentifier>
			<Abstract type="html">The Erizo room id for this room instance.</Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
			
			<Declaration>@property NSString *roomId</Declaration>
			
			
			<Anchor>//api/name/roomId</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/setPublishStreamId:</TokenIdentifier>
			<Abstract type="html">NSString stream id of the stream being published</Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
			
			<Declaration>@property (readonly) NSString *publishStreamId</Declaration>
			
			
			<Anchor>//api/name/publishStreamId</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/publishStreamId</TokenIdentifier>
			<Abstract type="html">NSString stream id of the stream being published</Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
			
			<Declaration>@property (readonly) NSString *publishStreamId</Declaration>
			
			
			<Anchor>//api/name/publishStreamId</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ECRoom/publishStreamId</TokenIdentifier>
			<Abstract type="html">NSString stream id of the stream being published</Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
			
			<Declaration>@property (readonly) NSString *publishStreamId</Declaration>
			
			
			<Anchor>//api/name/publishStreamId</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/setPublishStream:</TokenIdentifier>
			<Abstract type="html">ECStream referencing the stream being published.</Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
			
			<Declaration>@property (weak, readonly) ECStream *publishStream</Declaration>
			
			
			<Anchor>//api/name/publishStream</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/publishStream</TokenIdentifier>
			<Abstract type="html">ECStream referencing the stream being published.</Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
			
			<Declaration>@property (weak, readonly) ECStream *publishStream</Declaration>
			
			
			<Anchor>//api/name/publishStream</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ECRoom/publishStream</TokenIdentifier>
			<Abstract type="html">ECStream referencing the stream being published.</Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
			
			<Declaration>@property (weak, readonly) ECStream *publishStream</Declaration>
			
			
			<Anchor>//api/name/publishStream</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/setRecordEnabled:</TokenIdentifier>
			<Abstract type="html">BOOL set/get enable recording of the stream being published.</Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
			
			<Declaration>@property BOOL recordEnabled</Declaration>
			
			
			<Anchor>//api/name/recordEnabled</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/recordEnabled</TokenIdentifier>
			<Abstract type="html">BOOL set/get enable recording of the stream being published.</Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
			
			<Declaration>@property BOOL recordEnabled</Declaration>
			
			
			<Anchor>//api/name/recordEnabled</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ECRoom/recordEnabled</TokenIdentifier>
			<Abstract type="html">BOOL set/get enable recording of the stream being published.</Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
			
			<Declaration>@property BOOL recordEnabled</Declaration>
			
			
			<Anchor>//api/name/recordEnabled</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/setPeerToPeerRoom:</TokenIdentifier>
			<Abstract type="html">BOOL is P2P kind of room.</Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
			
			<Declaration>@property (readonly) BOOL peerToPeerRoom</Declaration>
			
			
			<Anchor>//api/name/peerToPeerRoom</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/peerToPeerRoom</TokenIdentifier>
			<Abstract type="html">BOOL is P2P kind of room.</Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
			
			<Declaration>@property (readonly) BOOL peerToPeerRoom</Declaration>
			
			
			<Anchor>//api/name/peerToPeerRoom</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ECRoom/peerToPeerRoom</TokenIdentifier>
			<Abstract type="html">BOOL is P2P kind of room.</Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
			
			<Declaration>@property (readonly) BOOL peerToPeerRoom</Declaration>
			
			
			<Anchor>//api/name/peerToPeerRoom</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/setPeerFactory:</TokenIdentifier>
			<Abstract type="html">RTC Factory shared by streams of this room.</Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
			
			<Declaration>@property RTCPeerConnectionFactory *peerFactory</Declaration>
			
			
			<Anchor>//api/name/peerFactory</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/peerFactory</TokenIdentifier>
			<Abstract type="html">RTC Factory shared by streams of this room.</Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
			
			<Declaration>@property RTCPeerConnectionFactory *peerFactory</Declaration>
			
			
			<Anchor>//api/name/peerFactory</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ECRoom/peerFactory</TokenIdentifier>
			<Abstract type="html">RTC Factory shared by streams of this room.</Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
			
			<Declaration>@property RTCPeerConnectionFactory *peerFactory</Declaration>
			
			
			<Anchor>//api/name/peerFactory</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/setPublishingStats:</TokenIdentifier>
			<Abstract type="html">BOOL enable/disable log publishing stats.
Stats are collected each 2 seconds max, having this flag on produces
console output, take a look to ECRoomStatsDelegate to being able
to receive events when stats are collected.</Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
			
			<Declaration>@property BOOL publishingStats</Declaration>
			
			
			<Anchor>//api/name/publishingStats</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/publishingStats</TokenIdentifier>
			<Abstract type="html">BOOL enable/disable log publishing stats.
Stats are collected each 2 seconds max, having this flag on produces
console output, take a look to ECRoomStatsDelegate to being able
to receive events when stats are collected.</Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
			
			<Declaration>@property BOOL publishingStats</Declaration>
			
			
			<Anchor>//api/name/publishingStats</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/ECRoom/publishingStats</TokenIdentifier>
			<Abstract type="html">BOOL enable/disable log publishing stats.
Stats are collected each 2 seconds max, having this flag on produces
console output, take a look to ECRoomStatsDelegate to being able
to receive events when stats are collected.</Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
			
			<Declaration>@property BOOL publishingStats</Declaration>
			
			
			<Anchor>//api/name/publishingStats</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/createSignalingChannelWithEncodedToken:</TokenIdentifier>
			<Abstract type="html">Creates a ECSignalingChannel instance using the given token.</Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
			
			<Declaration>- (void)createSignalingChannelWithEncodedToken:(NSString *)encodedToken</Declaration>
			<Parameters>
				<Parameter>
					<Name>encodedToken</Name>
					<Abstract type="html">The auth token for room access. See initWithEncodedToken:
    for token composition details.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/createSignalingChannelWithEncodedToken:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/publish:withOptions:</TokenIdentifier>
			<Abstract type="html">Publishes a given ECStream with given options.</Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
			
			<Declaration>- (void)publish:(ECStream *)stream withOptions:(NSDictionary *)options</Declaration>
			<Parameters>
				<Parameter>
					<Name>stream</Name>
					<Abstract type="html">The stream from where we will be publishing.</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">Dictionary with publishing options

        {
            data: BOOL // weather or not data should be enabled for this room.
            state: p2p // pass this key/value if you want to start a p2p stream.
        }

Notice that starting a p2p streams requiere recordEnabled flag to be set FALSE.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/publish:withOptions:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/subscribe:</TokenIdentifier>
			<Abstract type="html">Subscribe to a remote stream.</Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/intf/ECRoomDelegate</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/intf/ECRoomDelegate</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)subscribe:(NSString *)streamId</Declaration>
			<Parameters>
				<Parameter>
					<Name>streamId</Name>
					<Abstract type="html">The id of the stream you want to subscribe

You should be connected to the room before subscribing to a stream.
To know how to get streams ids take a look at the following methods:</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/subscribe:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/unsubscribe:</TokenIdentifier>
			<Abstract type="html">Unsubscribe from a remote stream.</Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/intf/ECRoomDelegate</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)unsubscribe:(NSString *)streamId</Declaration>
			<Parameters>
				<Parameter>
					<Name>streamId</Name>
					<Abstract type="html">The id of the stream you want to unsubscribe.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/unsubscribe:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/leave</TokenIdentifier>
			<Abstract type="html">Leave the room.</Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
			
			<Declaration>- (void)leave</Declaration>
			
			
			<Anchor>//api/name/leave</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/sendData:</TokenIdentifier>
			<Abstract type="html">Send data stream on channel</Abstract>
			<DeclaredIn>ECRoom.h</DeclaredIn>
			
			<Declaration>- (BOOL)sendData:(NSDictionary *)data</Declaration>
			
			
			<Anchor>//api/name/sendData:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/init</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECRoom.m</DeclaredIn>
			
			<Declaration>- (instancetype)init</Declaration>
			
			
			<Anchor>//api/name/init</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/clientDelegateRequiredForSignalingChannel:</TokenIdentifier>
			<Abstract type="html">Method called when the signaling channels needs a new client to operate a connection.</Abstract>
			<DeclaredIn>ECRoom.m</DeclaredIn>
			
			<Declaration>- (id&lt;ECSignalingChannelDelegate&gt;)clientDelegateRequiredForSignalingChannel:(ECSignalingChannel *)channel</Declaration>
			<Parameters>
				<Parameter>
					<Name>channel</Name>
					<Abstract type="html">ECSignalingChannel the channel that emit the message.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">ECClientDelegate instance.</Abstract></ReturnValue>
			<Anchor>//api/name/clientDelegateRequiredForSignalingChannel:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/signalingChannel:didError:</TokenIdentifier>
			<Abstract type="html">This event is fired when a token was not successfuly used.</Abstract>
			<DeclaredIn>ECRoom.m</DeclaredIn>
			
			<Declaration>- (void)signalingChannel:(ECSignalingChannel *)channel didError:(NSString *)reason</Declaration>
			<Parameters>
				<Parameter>
					<Name>channel</Name>
					<Abstract type="html">ECSignalingChannel the channel that emit the message.</Abstract>
				</Parameter><Parameter>
					<Name>reason</Name>
					<Abstract type="html">String of error returned by the server.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/signalingChannel:didError:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/signalingChannel:didConnectToRoom:</TokenIdentifier>
			<Abstract type="html">Event fired as soon a client connect to a room.</Abstract>
			<DeclaredIn>ECRoom.m</DeclaredIn>
			
			<Declaration>- (void)signalingChannel:(ECSignalingChannel *)channel didConnectToRoom:(NSDictionary *)roomMeta</Declaration>
			<Parameters>
				<Parameter>
					<Name>channel</Name>
					<Abstract type="html">ECSignalingChannel the channel that emit the message.</Abstract>
				</Parameter><Parameter>
					<Name>roomMeta</Name>
					<Abstract type="html">Metadata associated to the room that the client just connect.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/signalingChannel:didConnectToRoom:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/signalingChannel:didDisconnectOfRoom:</TokenIdentifier>
			<Abstract type="html">Event fired as soon as rtc channels were disconnected and websocket
connection is about to be closed.</Abstract>
			<DeclaredIn>ECRoom.m</DeclaredIn>
			
			<Declaration>- (void)signalingChannel:(ECSignalingChannel *)channel didDisconnectOfRoom:(NSDictionary *)roomMeta</Declaration>
			<Parameters>
				<Parameter>
					<Name>channel</Name>
					<Abstract type="html">ECSignalingChannel the channel that emit the message.</Abstract>
				</Parameter><Parameter>
					<Name>roomMeta</Name>
					<Abstract type="html">Metadata associated to the room that the client just connect.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/signalingChannel:didDisconnectOfRoom:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/signalingChannel:didReceiveStreamIdReadyToPublish:</TokenIdentifier>
			<Abstract type="html">Event fired when a new stream id has been created and server is ready
to start publishing it.</Abstract>
			<DeclaredIn>ECRoom.m</DeclaredIn>
			
			<Declaration>- (void)signalingChannel:(ECSignalingChannel *)channel didReceiveStreamIdReadyToPublish:(NSString *)streamId</Declaration>
			<Parameters>
				<Parameter>
					<Name>channel</Name>
					<Abstract type="html">ECSignalingChannel the channel that emit the message.</Abstract>
				</Parameter><Parameter>
					<Name>streamId</Name>
					<Abstract type="html">NSString id of the stream that will be published.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/signalingChannel:didReceiveStreamIdReadyToPublish:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/signalingChannel:didStartRecordingStreamId:withRecordingId:recordingDate:</TokenIdentifier>
			<Abstract type="html">Event fired when a recording of a stream has started.</Abstract>
			<DeclaredIn>ECRoom.m</DeclaredIn>
			
			<Declaration>- (void)signalingChannel:(ECSignalingChannel *)channel didStartRecordingStreamId:(NSString *)streamId withRecordingId:(NSString *)recordingId recordingDate:(NSDate *)recordingDate</Declaration>
			<Parameters>
				<Parameter>
					<Name>channel</Name>
					<Abstract type="html">ECSignalingChannel the channel that emit the message.</Abstract>
				</Parameter><Parameter>
					<Name>streamId</Name>
					<Abstract type="html">NSString id of the stream being recorded.</Abstract>
				</Parameter><Parameter>
					<Name>recordingId</Name>
					<Abstract type="html">NSString id of the recording id on Erizo server.</Abstract>
				</Parameter><Parameter>
					<Name>recordingDate</Name>
					<Abstract type="html">NSDate when the server start to recording the stream.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/signalingChannel:didStartRecordingStreamId:withRecordingId:recordingDate:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/signalingChannel:didFailStartRecordingStreamId:withErrorMsg:</TokenIdentifier>
			<Abstract type="html">Event fired when a recording of a stream has failed.</Abstract>
			<DeclaredIn>ECRoom.m</DeclaredIn>
			
			<Declaration>- (void)signalingChannel:(ECSignalingChannel *)channel didFailStartRecordingStreamId:(NSString *)streamId withErrorMsg:(NSString *)errorMsg</Declaration>
			<Parameters>
				<Parameter>
					<Name>channel</Name>
					<Abstract type="html">ECSignalingChannel the channel that emit the message.</Abstract>
				</Parameter><Parameter>
					<Name>streamId</Name>
					<Abstract type="html">NSString id of the stream being recorded.</Abstract>
				</Parameter><Parameter>
					<Name>errorMsg</Name>
					<Abstract type="html">Error string sent from the server.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/signalingChannel:didFailStartRecordingStreamId:withErrorMsg:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/signalingChannel:didStreamAddedWithId:</TokenIdentifier>
			<Abstract type="html">Event fired when a new StreamId has been added to a room.</Abstract>
			<DeclaredIn>ECRoom.m</DeclaredIn>
			
			<Declaration>- (void)signalingChannel:(ECSignalingChannel *)channel didStreamAddedWithId:(NSString *)streamId</Declaration>
			<Parameters>
				<Parameter>
					<Name>channel</Name>
					<Abstract type="html">ECSignalingChannel the channel that emit the message.</Abstract>
				</Parameter><Parameter>
					<Name>streamId</Name>
					<Abstract type="html">NSString added to the room.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/signalingChannel:didStreamAddedWithId:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/signalingChannel:didStreamRemovedWithId:</TokenIdentifier>
			<Abstract type="html">Event fired when a StreamId has been removed from a room, not necessary this
stream has been consumed.</Abstract>
			<DeclaredIn>ECRoom.m</DeclaredIn>
			
			<Declaration>- (void)signalingChannel:(ECSignalingChannel *)channel didStreamRemovedWithId:(NSString *)streamId</Declaration>
			<Parameters>
				<Parameter>
					<Name>channel</Name>
					<Abstract type="html">ECSignalingChannel the channel that emit the message.</Abstract>
				</Parameter><Parameter>
					<Name>streamId</Name>
					<Abstract type="html">NSString of the removed stream.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/signalingChannel:didStreamRemovedWithId:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/signalingChannel:didUnsubscribeStreamWithId:</TokenIdentifier>
			<Abstract type="html">Event fired when a StreamId previously subscribed has been unsubscribed.</Abstract>
			<DeclaredIn>ECRoom.m</DeclaredIn>
			
			<Declaration>- (void)signalingChannel:(ECSignalingChannel *)channel didUnsubscribeStreamWithId:(NSString *)streamId</Declaration>
			<Parameters>
				<Parameter>
					<Name>channel</Name>
					<Abstract type="html">ECSignalingChannel the channel that emit the message.</Abstract>
				</Parameter><Parameter>
					<Name>streamId</Name>
					<Abstract type="html">NSString of the unsubscribed stream.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/signalingChannel:didUnsubscribeStreamWithId:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/signalingChannel:didRequestPublishP2PStreamWithId:peerSocketId:</TokenIdentifier>
			<Abstract type="html">Event fired when some peer request to subscribe to a given stream.</Abstract>
			<DeclaredIn>ECRoom.m</DeclaredIn>
			
			<Declaration>- (void)signalingChannel:(ECSignalingChannel *)channel didRequestPublishP2PStreamWithId:(NSString *)streamId peerSocketId:(NSString *)peerSocketId</Declaration>
			<Parameters>
				<Parameter>
					<Name>channel</Name>
					<Abstract type="html">ECSignalingChannel the channel that emit the message.</Abstract>
				</Parameter><Parameter>
					<Name>streamId</Name>
					<Abstract type="html">NSString of the unsubscribed stream.</Abstract>
				</Parameter><Parameter>
					<Name>peerSocketId</Name>
					<Abstract type="html">String that identifies the peer connection for the stream.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/signalingChannel:didRequestPublishP2PStreamWithId:peerSocketId:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/signalingChannel:fromStreamId:receivedDataStream:</TokenIdentifier>
			<Abstract type="html">Event fired when data stream received.</Abstract>
			<DeclaredIn>ECRoom.m</DeclaredIn>
			
			<Declaration>- (void)signalingChannel:(ECSignalingChannel *)channel fromStreamId:(NSString *)streamId receivedDataStream:(NSDictionary *)dataStream</Declaration>
			<Parameters>
				<Parameter>
					<Name>channel</Name>
					<Abstract type="html">ECSignalingChannel the channel that emit the message.</Abstract>
				</Parameter><Parameter>
					<Name>stream</Name>
					<Abstract type="html">NSString id of the stream received from.</Abstract>
				</Parameter><Parameter>
					<Name>message</Name>
					<Abstract type="html">NSDictionary having message and timestamp.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/signalingChannel:fromStreamId:receivedDataStream:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/appClientRequestICEServers:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECRoom.m</DeclaredIn>
			
			<Declaration>- (NSDictionary *)appClientRequestICEServers:(ECClient *)client</Declaration>
			
			
			<Anchor>//api/name/appClientRequestICEServers:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/appClient:didChangeState:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECRoom.m</DeclaredIn>
			
			<Declaration>- (void)appClient:(ECClient *)_client didChangeState:(ECClientState)state</Declaration>
			
			
			<Anchor>//api/name/appClient:didChangeState:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/appClient:didChangeConnectionState:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECRoom.m</DeclaredIn>
			
			<Declaration>- (void)appClient:(ECClient *)client didChangeConnectionState:(RTCIceConnectionState)state</Declaration>
			
			
			<Anchor>//api/name/appClient:didChangeConnectionState:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/streamToPublishByAppClient:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECRoom.m</DeclaredIn>
			
			<Declaration>- (RTCMediaStream *)streamToPublishByAppClient:(ECClient *)client</Declaration>
			
			
			<Anchor>//api/name/streamToPublishByAppClient:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/appClient:didReceiveRemoteStream:withStreamId:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECRoom.m</DeclaredIn>
			
			<Declaration>- (void)appClient:(ECClient *)client didReceiveRemoteStream:(RTCMediaStream *)stream withStreamId:(NSString *)streamId</Declaration>
			
			
			<Anchor>//api/name/appClient:didReceiveRemoteStream:withStreamId:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/appClient:didError:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECRoom.m</DeclaredIn>
			
			<Declaration>- (void)appClient:(ECClient *)client didError:(NSError *)error</Declaration>
			
			
			<Anchor>//api/name/appClient:didError:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/gatherPublishingStats</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECRoom.m</DeclaredIn>
			
			<Declaration>- (void)gatherPublishingStats</Declaration>
			
			
			<Anchor>//api/name/gatherPublishingStats</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/processRTCLegacyStatsReport:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECRoom.m</DeclaredIn>
			
			<Declaration>- (void)processRTCLegacyStatsReport:(RTCLegacyStatsReport *)statsReport</Declaration>
			
			
			<Anchor>//api/name/processRTCLegacyStatsReport:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ECRoom/calculateBitrateForStatsReport:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ECRoom.m</DeclaredIn>
			
			<Declaration>- (unsigned long)calculateBitrateForStatsReport:(RTCLegacyStatsReport *)statsReport</Declaration>
			
			
			<Anchor>//api/name/calculateBitrateForStatsReport:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
        
        
	</File>
</Tokens>